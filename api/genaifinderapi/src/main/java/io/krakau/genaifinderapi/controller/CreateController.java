package io.krakau.genaifinderapi.controller;

import io.krakau.genaifinderapi.schema.dto.ProviderDto;
import io.krakau.genaifinderapi.schema.mongodb.Asset;
import io.krakau.genaifinderapi.service.CreateService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

/**
 *
 * @author Dominik
 */
@CrossOrigin(origins = "*")
@Tag(
        name = "Create",
        description = "Create entries for generated AI assets")
@RestController
@RequestMapping("/create")
public class CreateController {

    private final CreateService createService;

    @Autowired
    public CreateController(CreateService createService) {
        this.createService = createService;
    }

    @Operation(
            summary = "Endpoint for creating image assets",
            description = "This api endpoint is beeing used to create image asset entries.",
            tags = {"Create"})
    @ApiResponses({
        @ApiResponse(responseCode = "201",
                description = "Asset have been created.",
                content = {
                    @Content(schema = @Schema(implementation = Asset.class),
                            mediaType = "application/json")
                }),
        @ApiResponse(responseCode = "400",
                description = "Error message if the request failed.",
                content = {
                    @Content(schema = @Schema(implementation = Error.class),
                            mediaType = "application/json")
                })
    })
    @RequestMapping(
            path = "/image",
            method = RequestMethod.POST,
            consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
    public ResponseEntity<Asset> createImage(
            @PathVariable("provider") @Parameter(description = "Provider of generated image.", example = "OpenAI") @RequestParam String provider,
            @PathVariable("prompt") @Parameter(description = "Prompt that was used to generate the image.", example = "Create an image with flowers.") @RequestParam String prompt,
            @PathVariable("timestamp") @Parameter(description = "Time when the generated image was created in milliseconds.", example = "123456789") @RequestParam Long timestamp,
            @RequestPart("file") @Parameter(description = "Image file that was generated by provider.") MultipartFile file) throws Exception {
        return ResponseEntity.ok().body(this.createService.createImage(new ProviderDto(provider, prompt, timestamp), file));
    }

}